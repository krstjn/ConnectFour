/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package is.hi.c4.utlit;


import is.hi.c4.rum.Flotur;

import java.awt.Color;

import java.awt.Graphics;

import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;

import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.management.timer.Timer;
import javax.swing.BorderFactory;

import javax.swing.JPanel;

/**
 * Táknar einn dálk í viðmótinu.
 * @author Kristjan Þorarinsson, kth130@hi.is 
 * HBV201G 
 * Háskóli Íslands
 * 
 * @version 1
 */
public class DalkurPanel extends javax.swing.JPanel {
    private ArrayList<Flotur> ped;

    
    private int drop; // fallið sem peðið dettur
    
    
    /**
     * Creates new form DalkurPanel
     */
    public DalkurPanel() {
        initComponents();
        ped = new ArrayList<>();
        drop = 10;
        
        // handler sem bregst við því þegar mús fer inn í dálk
        addMouseListener(new MouseAdapter() {
        @Override public void mouseEntered(MouseEvent e) {
                JPanel panel = (JPanel) e.getSource();
                // litar border á dálkinum til að sýna hvaða dálkur er valinn
                panel.setBorder(BorderFactory.createLineBorder(Color.BLUE, 3));
                
                ((T4)getTopLevelAncestor()).
                setDalkur((DalkurPanel)e.getComponent());

        }
        });
        // handler sem bregst við því að músin fer út úr dálki
        addMouseListener(new MouseAdapter() {
        @Override public void mouseExited(MouseEvent e) {
                JPanel panel = (JPanel) e.getSource();
                // litar dálkinn í upprunalegum lit
                panel.setBorder(BorderFactory.createLineBorder(Color.BLACK, 3));
                // enginn dálkur lengur valinn
                ((T4)getTopLevelAncestor()).setDalkur(null);
            }
        });

    }
    /**
     * Litar peðin í dálkinum ef að sigur kom í honum.
     */
    public void dalkurWinner(){
        for(Flotur p : ped){
            p.setLitur(Color.GREEN);
            paint(getGraphics());
        }
    }
    /**
     * Litar peðin í línunni ef sigur kom í henni
     * @param y - númer línunnar
     */
    public void linaWinner(int y){
        Flotur p = ped.get(y);
        p.setLitur(Color.GREEN);
        paint(getGraphics());  
    }
    /**
     * Setur peð í dálk
     * @param f 
     */
    public void setjaI(Flotur f){
       // Bætir peðinu í safn peða 
        ped.add(f);
        
        int offset = reiknaByrjunarStadsetningu(f);
        
        // Setja x-ið
        f.setX((this.getSize().width-f.getWidth())/2);
              
        // Fjöldi hæða sem peðið á að falla 
        int haedir = drop; 
        
        for (int i=0; i< haedir; i++) {
             // Setur nýja y staðsetningu 
             f.setY(offset + i*f.getWidth());
             
             // Teiknar aftur eftir nýja staðsetningu
             // paint kallar á paintComponent
             paint(getGraphics());
             
             if(i >4)bidaISek();
                
        }
        drop--; // lækkar fallið fyrir næsta peð
    }
    /**
     * Reiknar út staðsetningu neðstu línunnar sem peðið á að fara í 
     * @param lina
     * @return staðsetning línunnar 
     */
    private int reiknaByrjunarStadsetningu(Flotur f) {
        // Reiknum með að breidd sé sama og hæð á peðunum
        return (getSize()).height - 10*f.getWidth();
    }
    
    /**
     * Bíður í eina sek
     */
     private void bidaISek() {
        try {
            Thread.sleep(Timer.ONE_SECOND/3);
        } catch (InterruptedException ex) {
            Logger.getLogger(DalkurPanel.class.getName()).log(Level.FINEST, null, ex);
        }
    }
    /**
     * Núllstillir breytur og býr til nýjan leik
     */
    public void nyrLeikur(){
        ped.clear();
        repaint();
        drop = 10;
    }
   /**
    * Yfirskrifar teikningu á panel
    * Teiknar peðin í dálkinum 
    * @param g 
    */
    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        g.drawLine(0, 30, 44, 30); 
        g.drawLine(0,60, 44, 60);
        g.drawLine(0, 90, 44, 90);
        for (Flotur p :ped) {
            p.paint(g);
        }
    }
    


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
